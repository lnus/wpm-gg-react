{"version":3,"sources":["Components/GameState/GameStateContext.jsx","Components/TypeTest/TypeTest.jsx","Components/WPMDisplay/WPMDisplay.jsx","Components/Timer/Timer.jsx","Components/Endscreen/Endscreen.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["GameStateContext","createContext","GameStateProvider","props","useState","randomWords","exactly","maxLength","targetWords","setTargetWords","completedWords","setCompletedWords","currentTarget","setCurrentTarget","currentUserInput","setCurrentUserInput","currentWordCorrect","setCurrentWordCorrect","timeElapsed","setTimeElapsed","maxTimer","setMaxTimer","timerSignalStart","setTimerSignalStart","currentWPM","setCurrentWPM","currentAccuracy","setCurrentAccuracy","finalWPM","setFinalWPM","finalAccuracy","setFinalAccuracy","showEndScreen","setShowEndScreen","resetGame","setResetGame","Provider","value","children","TypeTest","textWidth","setTextWidth","useContext","useEffect","inputRef","current","useRef","completedWordRef","useCallback","node","getBoundingClientRect","width","className","style","padding","ref","slice","map","wordData","correct","word","contentEditable","autoFocus","spellCheck","placeholder","autoComplete","autoCapitalize","tabIndex","onFocus","e","onBlur","onInput","startsWith","onKeyPress","key","correctWordInput","trim","completedWordEntry","newCompletedWords","concat","newTargetWord","console","log","preventDefault","handleSubmit","WPMDisplay","numWords","filter","join","split","length","calculateWPM","correctWords","accuracy","calculateAccuracy","toFixed","Timer","startCountDown","a","i","Promise","r","setTimeout","startCountDownRef","Endscreen","display","onClick","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff8376b0.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\nimport randomWords from 'random-words';\n\nexport const GameStateContext = createContext();\n\nexport const GameStateProvider = (props) => {\n  // Word states\n  const [targetWords, setTargetWords] = useState(\n    randomWords({ exactly: 10, maxLength: 7 })\n  );\n  const [completedWords, setCompletedWords] = useState([]);\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [currentUserInput, setCurrentUserInput] = useState('');\n  const [currentWordCorrect, setCurrentWordCorrect] = useState(true);\n\n  // Timer states\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [maxTimer, setMaxTimer] = useState(60);\n  const [timerSignalStart, setTimerSignalStart] = useState(false);\n\n  // WPM States\n  const [currentWPM, setCurrentWPM] = useState(0);\n  const [currentAccuracy, setCurrentAccuracy] = useState(0);\n  const [finalWPM, setFinalWPM] = useState(0);\n  const [finalAccuracy, setFinalAccuracy] = useState(0);\n\n  // Game-over states\n  const [showEndScreen, setShowEndScreen] = useState(false);\n  const [resetGame, setResetGame] = useState(false);\n\n  return (\n    <GameStateContext.Provider\n      value={{\n        targetWords: targetWords,\n        setTargetWords: setTargetWords,\n        completedWords: completedWords,\n        setCompletedWords: setCompletedWords,\n        currentTarget: currentTarget,\n        setCurrentTarget: setCurrentTarget,\n        currentUserInput: currentUserInput,\n        setCurrentUserInput: setCurrentUserInput,\n        currentWordCorrect: currentWordCorrect,\n        setCurrentWordCorrect: setCurrentWordCorrect,\n        timeElapsed: timeElapsed,\n        setTimeElapsed: setTimeElapsed,\n        maxTimer: maxTimer,\n        setMaxTimer: setMaxTimer,\n        timerSignalStart: timerSignalStart,\n        setTimerSignalStart: setTimerSignalStart,\n        showEndScreen: showEndScreen,\n        setShowEndScreen: setShowEndScreen,\n        currentWPM: currentWPM,\n        setCurrentWPM: setCurrentWPM,\n        currentAccuracy: currentAccuracy,\n        setCurrentAccuracy: setCurrentAccuracy,\n        finalWPM: finalWPM,\n        setFinalWPM: setFinalWPM,\n        finalAccuracy: finalAccuracy,\n        setFinalAccuracy: setFinalAccuracy,\n        resetGame: resetGame,\n        setResetGame: setResetGame,\n      }}\n    >\n      {props.children}\n    </GameStateContext.Provider>\n  );\n};\n","import React, {\n  useState,\n  useRef,\n  useCallback,\n  useContext,\n  useEffect,\n} from 'react';\nimport randomWords from 'random-words';\nimport { GameStateContext } from '../GameState/GameStateContext';\nimport './TypeTest.css';\n\n// TODO: General, make it count chars rather than words. Or both. :)\n\nconst TypeTest = () => {\n  const [textWidth, setTextWidth] = useState(0);\n\n  const {\n    targetWords,\n    setTargetWords,\n    completedWords,\n    setCompletedWords,\n    currentTarget,\n    setCurrentTarget,\n    currentUserInput,\n    setCurrentUserInput,\n    currentWordCorrect,\n    setCurrentWordCorrect,\n    timerSignalStart,\n    setTimerSignalStart,\n    resetGame,\n  } = useContext(GameStateContext);\n\n  useEffect(() => {\n    inputRef.current.value = '';\n    setCurrentUserInput('');\n  }, [resetGame, setCurrentUserInput]);\n\n  const inputRef = useRef();\n\n  const completedWordRef = useCallback((node) => {\n    if (node !== null) {\n      setTextWidth(node.getBoundingClientRect().width);\n    }\n  });\n\n  const isCurrentWordCorrect = (word) => {\n    if (currentTarget.startsWith(word) || word === '' || word === ' ') {\n      setCurrentWordCorrect(true);\n    } else {\n      setCurrentWordCorrect(false);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    if (e.key === ' ' || e.key === 'Enter') {\n      setCurrentWordCorrect(true);\n\n      // Checks if the user has inputted the correct word (true|false)\n      const correctWordInput = currentTarget === currentUserInput.trim();\n      const completedWordEntry = {\n        word: currentTarget,\n        correct: correctWordInput,\n      };\n\n      // Updates the completedWords state\n      const newCompletedWords = completedWords.concat([completedWordEntry]);\n      setCompletedWords(newCompletedWords);\n\n      // Updates the margin using the calculated width of the completedWords\n      // const newTextWidth = completedWordRef.getBoundingClientRect().width;\n      // setTextWidth(newTextWidth);\n\n      // Updates the currentTarget state\n      const newTargetWord = targetWords[1];\n      setCurrentTarget(newTargetWord);\n\n      // Updates the targetWords state, appending a new target word\n      setTargetWords([\n        ...targetWords.slice(1),\n        randomWords({ exactly: 1, maxLength: 7 })[0],\n      ]);\n      console.log(targetWords);\n\n      // Resets the user input\n      inputRef.current.value = null;\n      setCurrentUserInput('');\n\n      // Prevents a refresh on the submit\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <div className=\"type-test-wrapper\">\n      <div\n        className={'word-container-wrapper'}\n        style={{ padding: `0 0 0 calc(50% - ${textWidth}px` }}\n      >\n        <div\n          className=\"word-container word-container__completed-words\"\n          ref={completedWordRef}\n        >\n          {/* TODO: make this more dynamic so we can display more elements */}\n          {completedWords.slice(-5).map((wordData) => {\n            return (\n              <div\n                className={`word ${\n                  wordData.correct ? 'word--correct' : 'word--incorrect'\n                }`}\n              >\n                {wordData.word}\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"word-container word-container__current-word\">\n          <div\n            className={`word word__current-target${\n              !currentWordCorrect ? ' word__current-target--incorrect' : ''\n            }`}\n          >\n            {currentTarget}\n          </div>\n        </div>\n        <div className=\"word-container word-container__incoming-words\">\n          {targetWords.map((word) => {\n            if (word !== currentTarget)\n              return <div className={'word'}>{word}</div>;\n          })}\n        </div>\n      </div>\n      <div className={'input-wrapper'}>\n        <div className={'input-field-wrapper'}>\n          <input\n            ref={inputRef}\n            style={{ padding: '0 0 0 50%' }}\n            className=\"input-field\"\n            contentEditable\n            autoFocus\n            spellCheck=\"false\"\n            placeholder=\"type here\"\n            autoComplete=\"off\"\n            autoCapitalize=\"off\"\n            tabIndex=\"0\"\n            onFocus={(e) => {\n              e.currentTarget.placeholder = '';\n            }}\n            onBlur={(e) => {\n              e.currentTarget.placeholder = 'type here';\n            }}\n            onInput={(e) => {\n              setCurrentUserInput(e.currentTarget.value);\n              isCurrentWordCorrect(e.currentTarget.value);\n            }}\n            onKeyPress={(e) => {\n              if (!timerSignalStart) setTimerSignalStart(true);\n              handleSubmit(e);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TypeTest;\n","import React, { useContext, useEffect } from 'react';\nimport './WPMDisplay.css';\nimport { GameStateContext } from '../GameState/GameStateContext';\n\nconst WPMDisplay = () => {\n  const {\n    completedWords,\n    timeElapsed,\n    currentWPM,\n    setCurrentWPM,\n    currentAccuracy,\n    setCurrentAccuracy,\n  } = useContext(GameStateContext);\n\n  const calculateWPM = () => {\n    let correctWordsArr = completedWords\n      .filter((wordData) => {\n        if (wordData.correct) return wordData;\n        else return null;\n      })\n      .map((wordData) => {\n        return wordData.word;\n      });\n    let charSplitArr = correctWordsArr.join('').split('');\n    let numWords = charSplitArr.length;\n    let wordsStandardizedTotal = numWords / 5;\n    let wpm = (wordsStandardizedTotal / timeElapsed) * 60;\n    setCurrentWPM(wpm);\n  };\n\n  const calculateAccuracy = () => {\n    let correctWords = completedWords.filter((wordData) => {\n      if (wordData.correct) return wordData;\n    });\n\n    let accuracy =\n      correctWords.length !== 0\n        ? correctWords.length / completedWords.length\n        : 0;\n\n    setCurrentAccuracy(accuracy);\n  };\n\n  useEffect(() => {\n    calculateWPM();\n    calculateAccuracy();\n  }, [timeElapsed]);\n\n  return (\n    <div className=\"wpm-status-wrapper\">\n      <div className=\"wpm-status-display\">\n        <div className=\"wpm-status-display__header\">Live stats:</div>\n        <div className=\"wpm-status-display__wpm\">\n          WPM: {currentWPM ? currentWPM.toFixed(2) : 0}\n        </div>\n        <div className=\"wpm-status-display__accuracy\">\n          Accuracy {(currentAccuracy * 100).toFixed(2)}%\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WPMDisplay;\n","import React, { useRef, useContext, useEffect } from 'react';\nimport { GameStateContext } from '../GameState/GameStateContext';\nimport './Timer.css';\n\nconst Timer = () => {\n  const {\n    timeElapsed,\n    setTimeElapsed,\n    maxTimer,\n    timerSignalStart,\n    currentWPM,\n    setFinalWPM,\n    currentAccuracy,\n    setFinalAccuracy,\n    setShowEndScreen,\n  } = useContext(GameStateContext);\n\n  const startCountDown = async () => {\n    // Function for a timer uwu\n    if (timerSignalStart) {\n      for (let i = maxTimer - 1; i >= 0; i--) {\n        await new Promise((r) => setTimeout(r, 1000));\n        setTimeElapsed(maxTimer - i);\n      }\n    }\n  };\n\n  const startCountDownRef = useRef();\n  startCountDownRef.current = startCountDown;\n\n  useEffect(() => {\n    // Starts the timer on timerSignalStart - update\n    // Only if it's set to true\n    if (timerSignalStart) {\n      startCountDownRef.current();\n    }\n  }, [timerSignalStart, startCountDownRef]);\n\n  useEffect(() => {\n    // When the timer ends\n    if (timeElapsed >= maxTimer) {\n      setFinalAccuracy(currentAccuracy);\n      setFinalWPM(currentWPM);\n      setShowEndScreen(true);\n    }\n  }, [\n    timeElapsed,\n    maxTimer,\n    setFinalAccuracy,\n    setFinalWPM,\n    setShowEndScreen,\n    currentWPM,\n    currentAccuracy,\n  ]);\n\n  return (\n    // TODO: Write a displayAsMinutes function\n    <div className=\"timer-info-wrapper\">\n      <div className=\"timer-text\">{maxTimer - timeElapsed}</div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { useContext } from 'react';\nimport { GameStateContext } from '../GameState/GameStateContext';\nimport './Endscreen.css';\n\nconst Endscreen = () => {\n  const {\n    showEndScreen,\n    setShowEndScreen,\n    finalWPM,\n    finalAccuracy,\n    setCurrentAccuracy,\n    setCurrentWPM,\n    setCompletedWords,\n    setTimeElapsed,\n    setResetGame,\n    setTimerSignalStart,\n  } = useContext(GameStateContext);\n\n  const resetGame = () => {\n    setCurrentAccuracy(0);\n    setCurrentWPM(0);\n    setCompletedWords([]);\n    setTimeElapsed(0);\n    setTimerSignalStart(false);\n    setResetGame(true);\n  };\n\n  return (\n    <div\n      className=\"end-screen\"\n      style={showEndScreen ? { display: 'inherit' } : { display: 'none' }}\n    >\n      <div className=\"end-screen__inner\">\n        <div className=\"end-screen__inner-content\">\n          <div className=\"end-screen__inner-content-header\">Final stats:</div>\n          <div className=\"end-screen__inner-content-wpm\">\n            WPM: {finalWPM ? finalWPM.toFixed(2) : 0}\n          </div>\n          <div className=\"end-screen__inner-content-accuracy\">\n            Accuracy: {(finalAccuracy * 100).toFixed(2)}%\n          </div>\n\n          <div className=\"end-screen__menu\">\n            <button\n              className=\"end-screen__menu-button\"\n              onClick={(e) => {\n                resetGame();\n                setShowEndScreen(false);\n              }}\n            >\n              Close\n            </button>\n            <button\n              className=\"end-screen__menu-button end-screen__menu-button--green\"\n              onClick={(e) => {\n                alert('not implemented :(');\n              }}\n            >\n              Share!\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Endscreen;\n","import './App.css';\n\nimport React from 'react';\nimport TypeTest from './Components/TypeTest/TypeTest';\nimport WPMDisplay from './Components/WPMDisplay/WPMDisplay';\nimport Timer from './Components/Timer/Timer';\nimport { GameStateProvider } from './Components/GameState/GameStateContext';\nimport Endscreen from './Components/Endscreen/Endscreen';\n\nconst App = () => {\n  return (\n    <GameStateProvider>\n      <div className=\"timer-wrapper\">\n        <Timer />\n      </div>\n      <div className=\"typing-game-wrapper\">\n        <TypeTest />\n      </div>\n      <div className=\"info-wrapper\">\n        <WPMDisplay />\n      </div>\n      <div className=\"end-screen-wrapper\">\n        <Endscreen />\n      </div>\n    </GameStateProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}