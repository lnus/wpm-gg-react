{"version":3,"sources":["Components/GameState/GameStateContext.jsx","Components/Endscreen/Endscreen.jsx","Components/MenuBar/MenuBar.jsx","Components/Timer/Timer.jsx","Components/Word/Word.jsx","Components/TypeTest/TypeTest.jsx","Components/WPMDisplay/WPMDisplay.jsx","Themes/light.js","Themes/dark.js","App.jsx","reportWebVitals.js","index.js"],"names":["GameStateContext","createContext","GameStateProvider","props","useState","randomWords","exactly","maxLength","targetWords","setTargetWords","completedWords","setCompletedWords","currentTarget","setCurrentTarget","currentUserInput","setCurrentUserInput","currentWordCorrect","setCurrentWordCorrect","timeElapsed","setTimeElapsed","maxTimer","setMaxTimer","timerSignalStart","setTimerSignalStart","currentWPM","setCurrentWPM","currentAccuracy","setCurrentAccuracy","finalWPM","setFinalWPM","finalAccuracy","setFinalAccuracy","showEndScreen","setShowEndScreen","resetGame","setResetGame","Provider","value","children","Transition","React","forwardRef","ref","Slide","direction","useStyles","makeStyles","theme","dialog","backgrondColor","Endscreen","classes","useContext","handleClose","Dialog","onClose","open","TransitionComponent","PaperProps","style","backgroundColor","boxShadow","padding","keepMounted","className","DialogTitle","Typography","variant","DialogContent","diacontent","toFixed","DialogActions","Button","onClick","color","alert","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","toolbarButtons","marginLeft","MenuBar","AppBar","position","Toolbar","IconButton","edge","MenuBook","Brush","paper","palette","primary","main","formatSeconds","time","secs","output","Timer","startCountDown","a","i","Promise","r","setTimeout","startCountDownRef","useRef","current","useEffect","Grid","container","justify","alignItems","Remove","Add","Word","item","defaultProps","marginTop","textAlign","wordContainer","fontSize","input","fontsize","word","text","correct","incorrect","TypeTest","inputRef","xs","md","lg","Paper","slice","map","wordData","zeroMinWidth","TextField","spellCheck","autoComplete","autoCapitalize","placeholder","tabIndex","autoFocus","onFocus","e","target","onBlur","onInput","startsWith","onKeyPress","key","correctWordInput","trim","completedWordEntry","newCompletedWords","concat","newTargetWord","console","log","preventDefault","handleSubmit","obj","WPMDisplay","numWords","filter","join","split","length","calculateWPM","correctWords","accuracy","calculateAccuracy","Keyboard","Score","createMuiTheme","secondary","green","red","blue","orange","background","default","overrides","teal","pink","indigo","deepOrange","maxWidth","overflow","App","DarkTheme","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f5483c8.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\nimport randomWords from 'random-words';\n\nexport const GameStateContext = createContext();\n\nexport const GameStateProvider = (props) => {\n  // Word states\n  const [targetWords, setTargetWords] = useState(\n    randomWords({ exactly: 25, maxLength: 7 })\n  );\n  const [completedWords, setCompletedWords] = useState([]);\n  const [currentTarget, setCurrentTarget] = useState(targetWords[0]);\n  const [currentUserInput, setCurrentUserInput] = useState('');\n  const [currentWordCorrect, setCurrentWordCorrect] = useState(true);\n\n  // Timer states\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [maxTimer, setMaxTimer] = useState(60);\n  const [timerSignalStart, setTimerSignalStart] = useState(false);\n\n  // WPM States\n  const [currentWPM, setCurrentWPM] = useState(0);\n  const [currentAccuracy, setCurrentAccuracy] = useState(0);\n  const [finalWPM, setFinalWPM] = useState(0);\n  const [finalAccuracy, setFinalAccuracy] = useState(0);\n\n  // Game-over states\n  const [showEndScreen, setShowEndScreen] = useState(false);\n  const [resetGame, setResetGame] = useState(false);\n\n  return (\n    <GameStateContext.Provider\n      value={{\n        targetWords: targetWords,\n        setTargetWords: setTargetWords,\n        completedWords: completedWords,\n        setCompletedWords: setCompletedWords,\n        currentTarget: currentTarget,\n        setCurrentTarget: setCurrentTarget,\n        currentUserInput: currentUserInput,\n        setCurrentUserInput: setCurrentUserInput,\n        currentWordCorrect: currentWordCorrect,\n        setCurrentWordCorrect: setCurrentWordCorrect,\n        timeElapsed: timeElapsed,\n        setTimeElapsed: setTimeElapsed,\n        maxTimer: maxTimer,\n        setMaxTimer: setMaxTimer,\n        timerSignalStart: timerSignalStart,\n        setTimerSignalStart: setTimerSignalStart,\n        showEndScreen: showEndScreen,\n        setShowEndScreen: setShowEndScreen,\n        currentWPM: currentWPM,\n        setCurrentWPM: setCurrentWPM,\n        currentAccuracy: currentAccuracy,\n        setCurrentAccuracy: setCurrentAccuracy,\n        finalWPM: finalWPM,\n        setFinalWPM: setFinalWPM,\n        finalAccuracy: finalAccuracy,\n        setFinalAccuracy: setFinalAccuracy,\n        resetGame: resetGame,\n        setResetGame: setResetGame,\n      }}\n    >\n      {props.children}\n    </GameStateContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { GameStateContext } from '../GameState/GameStateContext';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  ButtonGroup,\n  makeStyles,\n  Slide,\n  Button,\n  Typography,\n} from '@material-ui/core';\n// import './Endscreen.css';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst useStyles = makeStyles((theme) => ({\n  dialog: {\n    backgrondColor: 'black',\n  },\n}));\n\nconst Endscreen = () => {\n  const classes = useStyles();\n\n  const {\n    showEndScreen,\n    setShowEndScreen,\n    finalWPM,\n    finalAccuracy,\n    setCurrentAccuracy,\n    setCurrentWPM,\n    setCompletedWords,\n    setTimeElapsed,\n    setResetGame,\n    setTimerSignalStart,\n  } = useContext(GameStateContext);\n\n  const resetGame = () => {\n    setCurrentAccuracy(0);\n    setCurrentWPM(0);\n    setCompletedWords([]);\n    setTimeElapsed(0);\n    setTimerSignalStart(false);\n    setResetGame(true);\n  };\n\n  const handleClose = () => {\n    resetGame();\n    setShowEndScreen(false);\n  };\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      open={showEndScreen}\n      TransitionComponent={Transition}\n      PaperProps={{\n        style: {\n          backgroundColor: 'rgba(0,0,0, 0.8)',\n          boxShadow: 'none',\n          padding: 20,\n        },\n      }}\n      keepMounted\n      className={classes.dialog}\n    >\n      <DialogTitle>\n        <Typography variant=\"h4\">Final results</Typography>\n      </DialogTitle>\n      <DialogContent className={classes.diacontent}>\n        <Typography variant=\"body1\">\n          WPM: {finalWPM ? finalWPM.toFixed(2) : 0}\n        </Typography>\n        <Typography variant=\"body1\">\n          Accuracy: {(finalAccuracy * 100).toFixed(2)}%\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"secondary\">\n          Close\n        </Button>\n        <Button\n          onClick={() => {\n            alert('Not implemented yet');\n            handleClose();\n          }}\n          color=\"primary\"\n        >\n          Share\n        </Button>\n      </DialogActions>\n    </Dialog>\n    // <div\n    //   className=\"end-screen\"\n    //   style={showEndScreen ? { display: 'inherit' } : { display: 'none' }}\n    // >\n    //   <div className=\"end-screen__inner\">\n    //     <div className=\"end-screen__inner-content\">\n    //       <div className=\"end-screen__inner-content-header\">Final stats:</div>\n\n    //       <div className=\"end-screen__menu\">\n    //         <button\n    //           className=\"end-screen__menu-button\"\n    //           onClick={(e) => {\n    //           }}\n    //         >\n    //           Close\n    //         </button>\n    //         <button\n    //           className=\"end-screen__menu-button end-screen__menu-button--green\"\n    //           onClick={(e) => {\n    //             alert('not implemented :(');\n    //           }}\n    //         >\n    //           Share!\n    //         </button>\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n  );\n};\n\nexport default Endscreen;\n","import React from 'react';\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { MenuBook, Brush } from '@material-ui/icons/';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginBottom: 20,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  toolbarButtons: {\n    marginLeft: 'auto',\n  },\n}));\n\nconst MenuBar = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"sticky\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h6\">placeholder.io</Typography>\n          <div className={classes.toolbarButtons}>\n            <IconButton edge=\"start\">\n              <MenuBook color=\"secondary\" />\n            </IconButton>\n            <IconButton>\n              {/* Add a interaction to select theme here */}\n              <Brush color=\"secondary\" />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default MenuBar;\n","import React, { useRef, useContext, useEffect } from 'react';\nimport { GameStateContext } from '../GameState/GameStateContext';\nimport {\n  Paper,\n  Grid,\n  IconButton,\n  Typography,\n  makeStyles,\n} from '@material-ui/core';\nimport { Add, Remove } from '@material-ui/icons';\n// import './Timer.css';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    backgroundColor: theme.palette.primary.main,\n    padding: 20,\n    marginBottom: 20,\n  },\n}));\n\nconst formatSeconds = (time) => {\n  // stole this from the online lol\n  // https://code.labstack.com/HVdZZYqH\n\n  // ingoring hours here. probably won't happen\n  const mins = ~~((time % 3600) / 60);\n  const secs = ~~time % 60;\n\n  let output = '';\n  output += '' + mins + ':' + (secs < 10 ? '0' : '');\n  output += '' + secs;\n\n  return output;\n};\n\nconst Timer = () => {\n  const classes = useStyles();\n  const {\n    timeElapsed,\n    setTimeElapsed,\n    maxTimer,\n    setMaxTimer,\n    timerSignalStart,\n    currentWPM,\n    setFinalWPM,\n    currentAccuracy,\n    setFinalAccuracy,\n    setShowEndScreen,\n  } = useContext(GameStateContext);\n\n  const startCountDown = async () => {\n    // Function for a timer uwu\n    if (timerSignalStart) {\n      for (let i = maxTimer - 1; i >= 0; i--) {\n        await new Promise((r) => setTimeout(r, 1000));\n        setTimeElapsed(maxTimer - i);\n      }\n    }\n  };\n\n  const startCountDownRef = useRef();\n  startCountDownRef.current = startCountDown;\n\n  useEffect(() => {\n    // Starts the timer on timerSignalStart - update\n    // Only if it's set to true\n    if (timerSignalStart) {\n      startCountDownRef.current();\n    }\n  }, [timerSignalStart, startCountDownRef]);\n\n  useEffect(() => {\n    // When the timer ends\n    if (timeElapsed >= maxTimer) {\n      setFinalAccuracy(currentAccuracy);\n      setFinalWPM(currentWPM);\n      setShowEndScreen(true);\n    }\n  }, [\n    timeElapsed,\n    maxTimer,\n    setFinalAccuracy,\n    setFinalWPM,\n    setShowEndScreen,\n    currentWPM,\n    currentAccuracy,\n  ]);\n\n  return (\n    // TODO: Write a displayAsMinutes function\n    <Grid container justify=\"center\" alignItems=\"center\">\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <IconButton\n          color=\"secondary\"\n          onClick={() => {\n            // Removes 15 seconds from the maxTimer\n            if (maxTimer >= 16) setMaxTimer(maxTimer - 15);\n          }}\n        >\n          <Remove />\n        </IconButton>\n        <Typography color=\"inherit\" variant=\"h2\">\n          {formatSeconds(maxTimer - timeElapsed)}\n        </Typography>\n        <IconButton\n          color=\"secondary\"\n          onClick={() => {\n            // Adds 15 seconds to the maxTimer\n            setMaxTimer(maxTimer + 15);\n          }}\n        >\n          <Add />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport { Grid, Typography } from '@material-ui/core';\n\nconst Word = ({ children, variant, classes }) => {\n  return (\n    <Grid item className={'word'}>\n      <Typography className={classes} variant={variant} color=\"primary\">\n        {children}\n      </Typography>\n    </Grid>\n  );\n};\n\nWord.defaultProps = {\n  variant: 'subtitle1',\n};\n\nexport default Word;\n","import randomWords from 'random-words';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { GameStateContext } from '../GameState/GameStateContext';\nimport { Grid, makeStyles, Paper, TextField } from '@material-ui/core';\nimport Word from '../Word/Word';\n\n// TODO: General, make it count chars rather than words. Or both. :)\n\n// TODO: Use themeprovider for colors\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: '5px',\n    alignItems: 'center',\n    justify: 'center',\n  },\n  paper: {\n    padding: 20,\n    textAlign: 'center',\n    backgroundColor: theme.palette.primary.main,\n  },\n  wordContainer: {\n    fontSize: 20,\n  },\n  input: {\n    fontsize: 20,\n    padding: 32,\n  },\n  word: {\n    color: theme.palette.text.primary,\n  },\n  correct: {\n    color: theme.palette.text.correct,\n  },\n  incorrect: {\n    color: theme.palette.text.incorrect,\n  },\n}));\n\nconst TypeTest = () => {\n  const classes = useStyles();\n\n  const {\n    targetWords,\n    setTargetWords,\n    completedWords,\n    setCompletedWords,\n    currentTarget,\n    setCurrentTarget,\n    currentUserInput,\n    setCurrentUserInput,\n    setCurrentWordCorrect,\n    timerSignalStart,\n    setTimerSignalStart,\n    resetGame,\n  } = useContext(GameStateContext);\n\n  const inputRef = useRef();\n\n  useEffect(() => {\n    inputRef.current.value = '';\n    setCurrentUserInput('');\n  }, [resetGame, setCurrentUserInput]);\n\n  const isCurrentWordCorrect = (word) => {\n    if (currentTarget.startsWith(word) || word === '' || word === ' ') {\n      setCurrentWordCorrect(true);\n    } else {\n      setCurrentWordCorrect(false);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    if (e.key === ' ' || e.key === 'Enter') {\n      setCurrentWordCorrect(true);\n\n      // Checks if the user has inputted the correct word (true|false)\n      const correctWordInput = currentTarget === currentUserInput.trim();\n      const completedWordEntry = {\n        word: currentTarget,\n        correct: correctWordInput,\n      };\n\n      // Updates the completedWords state\n      const newCompletedWords = completedWords.concat([completedWordEntry]);\n      setCompletedWords(newCompletedWords);\n\n      // Updates the currentTarget state\n      const newTargetWord = targetWords[1];\n      setCurrentTarget(newTargetWord);\n\n      // Updates the targetWords state appending a new target word\n      setTargetWords([\n        ...targetWords.slice(1),\n        randomWords({ exactly: 1, maxLength: 7 })[0],\n      ]);\n      console.log(targetWords);\n\n      // Resets the user input\n      inputRef.current.value = null;\n      setCurrentUserInput('');\n\n      // Prevents a refresh on the submit\n      e.preventDefault();\n    }\n  };\n\n  return (\n    <Grid\n      container\n      className={classes.root}\n      alignItems=\"center\"\n      justify=\"center\"\n    >\n      <Grid item xs={3} md={4} lg={6}>\n        <Paper className={classes.paper}>\n          <Grid\n            container\n            item\n            spacing={1}\n            direction=\"row\"\n            className={classes.wordContainer}\n          >\n            {/* TODO: make this more dynamic so we can display more elements */}\n            {completedWords.slice(-20).map((wordData) => {\n              return wordData.correct ? (\n                <Word classes={classes.correct}>{wordData.word}</Word>\n              ) : (\n                <Word classes={classes.incorrect}>{wordData.word}</Word>\n              );\n            })}\n            <Word classes={classes.word}>{currentTarget}</Word>\n            {targetWords.map((word) => {\n              if (word !== currentTarget)\n                return <Word classes={classes.word}>{word}</Word>;\n            })}\n          </Grid>\n        </Paper>\n      </Grid>\n      <Grid\n        container\n        spacing={1}\n        justify=\"center\"\n        alignItems=\"center\"\n        direction=\"row\"\n        zeroMinWidth\n      >\n        <Grid item>\n          <TextField\n            variant=\"outlined\"\n            color=\"primary\"\n            inputRef={inputRef}\n            className={classes.input}\n            spellCheck=\"false\"\n            autoComplete=\"off\"\n            autoCapitalize=\"off\"\n            placeholder=\"type here\"\n            tabIndex=\"0\"\n            autoFocus\n            onFocus={(e) => {\n              e.target.placeholder = '';\n            }}\n            onBlur={(e) => {\n              e.target.placeholder = 'type here';\n            }}\n            onInput={(e) => {\n              setCurrentUserInput(e.target.value);\n              isCurrentWordCorrect(e.target.value);\n            }}\n            onKeyPress={(e) => {\n              if (!timerSignalStart) setTimerSignalStart(true);\n              handleSubmit(e);\n            }}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default TypeTest;\n","import { Grid, Typography, Paper, makeStyles } from '@material-ui/core';\nimport { Keyboard, Score } from '@material-ui/icons';\nimport React, { useContext, useEffect } from 'react';\nimport { GameStateContext } from '../GameState/GameStateContext';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: 30,\n    backgroundColor: theme.palette.primary.main,\n  },\n  obj: {\n    color: theme.palette.text.primary,\n  },\n}));\n\nconst WPMDisplay = () => {\n  const classes = useStyles();\n\n  const {\n    completedWords,\n    timeElapsed,\n    currentWPM,\n    setCurrentWPM,\n    currentAccuracy,\n    setCurrentAccuracy,\n  } = useContext(GameStateContext);\n\n  const calculateWPM = () => {\n    let correctWordsArr = completedWords\n      .filter((wordData) => {\n        if (wordData.correct) return wordData;\n        else return null;\n      })\n      .map((wordData) => {\n        return wordData.word;\n      });\n    let charSplitArr = correctWordsArr.join('').split('');\n    let numWords = charSplitArr.length;\n    let wordsStandardizedTotal = numWords / 5;\n    let wpm = (wordsStandardizedTotal / timeElapsed) * 60;\n    setCurrentWPM(wpm);\n  };\n\n  const calculateAccuracy = () => {\n    let correctWords = completedWords.filter((wordData) => {\n      if (wordData.correct) return wordData;\n    });\n\n    let accuracy =\n      correctWords.length !== 0\n        ? correctWords.length / completedWords.length\n        : 0;\n\n    setCurrentAccuracy(accuracy);\n  };\n\n  useEffect(() => {\n    calculateWPM();\n    calculateAccuracy();\n  }, [timeElapsed]);\n\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n      <Paper className={classes.paper}>\n        <Grid\n          container\n          item\n          direction=\"row\"\n          justify=\"flex-start\"\n          className={classes.obj}\n        >\n          <Keyboard color=\"inherit\" />\n          <Typography color=\"inherit\" variant=\"body1\">\n            WPM {currentWPM ? currentWPM.toFixed(2) : '0.00'}\n          </Typography>\n        </Grid>\n        <Grid\n          container\n          item\n          direction=\"row\"\n          justify=\"flex-start\"\n          className={classes.obj}\n        >\n          <Score color=\"inherit\" />\n          <Typography variant=\"body1\" color=\"inherit\">\n            Accuracy {(currentAccuracy * 100).toFixed(2)}%\n          </Typography>\n        </Grid>\n      </Paper>\n    </Grid>\n  );\n};\n\nexport default WPMDisplay;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { blue, orange, red, green } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    text: {\n      primary: '#000',\n      secondary: '#000',\n      correct: green[600],\n      incorrect: red[600],\n    },\n    primary: {\n      main: blue[600],\n    },\n    secondary: {\n      main: orange[600],\n    },\n    correct: {\n      color: green[600],\n    },\n    incorrect: {\n      color: red[600],\n    },\n    background: {\n      default: '#F8F8F8',\n    },\n  },\n});\n\ntheme.overrides = {};\n\nexport default theme;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { indigo, deepOrange, teal, pink } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    text: {\n      primary: '#FFF',\n      secondary: '#FFF',\n      correct: teal[500],\n      incorrect: pink[500],\n    },\n    primary: {\n      main: indigo[500],\n    },\n    secondary: {\n      main: deepOrange[500],\n    },\n    background: {\n      default: '#343434',\n    },\n  },\n});\n\ntheme.overrides = {};\n\nexport default theme;\n","import './App.css';\n\nimport React, { useState } from 'react';\nimport Endscreen from './Components/Endscreen/Endscreen';\nimport { GameStateProvider } from './Components/GameState/GameStateContext';\nimport MenuBar from './Components/MenuBar/MenuBar';\nimport Timer from './Components/Timer/Timer';\nimport TypeTest from './Components/TypeTest/TypeTest';\nimport WPMDisplay from './Components/WPMDisplay/WPMDisplay';\nimport LightTheme from './Themes/light';\nimport DarkTheme from './Themes/dark';\nimport ThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport { CssBaseline, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: '100%',\n    overflow: 'hidden',\n  },\n}));\n\nconst App = () => {\n  const [theme, setTheme] = useState(DarkTheme);\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <MenuBar />\n        <GameStateProvider>\n          <Timer />\n          <TypeTest />\n          <WPMDisplay />\n          <Endscreen />\n        </GameStateProvider>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}